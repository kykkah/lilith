// Lilith multi-module Gradle build
// Follows in lilith/src/main/resources/upgrade-gradle-6-to-7-docs/lilith-gradle-build-overview.md and docs/lilith-gradle-streamlined-process.md

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        // quality / infra plugins
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
        classpath 'de.thetaphi:forbiddenapis:3.6'
        // application packaging (shadow)
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
    }
}

apply from: 'dependencyDefinitions.gradle'
apply from: 'projectDependencies.gradle'

wrapper {
	gradleVersion = '7.6'
	// distributionType = Wrapper.DistributionType.ALL}
	// TODO:
	// MacAppBundle
}

def copyright = "Copyright \u00a9 2007-2021 J\u00f6rn Huxhorn"
import org.gradle.api.tasks.compile.JavaCompile
import org.gradle.jvm.toolchain.JavaLanguageVersion
import org.gradle.plugins.signing.Sign

// Local Maven repositories used for publishing/consuming
ext {
    localReleaseRepoFile = new File("${System.properties.'user.home'}/local-gradle-repository/release")
    localSnapshotRepoFile = new File("${System.properties.'user.home'}/local-gradle-repository/snapshot")
    localReleaseRepo = localReleaseRepoFile.toURI().toString()
    localSnapshotRepo = localSnapshotRepoFile.toURI().toString()
}


apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'base'
apply plugin: 'signing'
apply plugin: 'com.github.kt3k.coveralls' // see https://github.com/kt3k/coveralls-gradle-plugin

// Project-wide config
allprojects {
    apply plugin: 'project-reports'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    group = 'de.huxhorn.lilith'
    version = '8.5.0'
    def prereleaseIdentifier = System.properties.'prerelease'
    if (prereleaseIdentifier) {
        version = version + '-' + prereleaseIdentifier
    } else if (!System.properties.'release') {
        version = version + '-SNAPSHOT'
    }

    repositories {
        maven { url localReleaseRepo }
        maven { url localSnapshotRepo }
        mavenLocal()
        mavenCentral()
    }

    jacoco { toolVersion = '0.8.11' }
}

subprojects { proj ->
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'de.thetaphi.forbiddenapis'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'

    // Java toolchain compatibility
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
        withSourcesJar()
        withJavadocJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.release = 17
    }

    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        configProperties = [
                'configDir': rootProject.file('config/checkstyle'),
                'baseDir'  : rootDir,
        ]
        toolVersion = '9.2'
        // ignoreFailures = true // can be relaxed locally
    }

    pmd {
        ruleSetFiles = files(rootProject.file('config/pmd/ruleSet.xml'))
        ruleSets = []
        toolVersion = '6.41.0'
        incrementalAnalysis = true
        // ignoreFailures = true // can be relaxed locally
    }

    forbiddenApis {
        bundledSignatures = [
                'jdk-unsafe',
                'jdk-deprecated-17',
                'jdk-internal-17',
                'jdk-non-portable',
                'jdk-reflection',
        ]
        ignoreFailures = false
    }

    tasks.withType(Javadoc).configureEach { Javadoc j ->
        if (JavaVersion.current().isJava10Compatible()) {
            j.options.optionFiles << rootProject.file('config/javadoc10.options')
        } else {
            j.options.optionFiles << rootProject.file('config/javadoc.options')
        }
    }

    // Per-module jacoco reports
    jacocoTestReport {
        additionalSourceDirs.from(files(sourceSets.main.allSource.srcDirs))
        sourceDirectories.from(files(sourceSets.main.allSource.srcDirs))
        classDirectories.from(files(sourceSets.main.output))
        reports {
            html.required.set(true)
            xml.required.set(true)
            csv.required.set(false)
        }
    }

    // Maven publication to local repositories (release/snapshot based on version)
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom {
                    name = proj.name
                    description = proj.description ?: "${proj.path}"
                    url = 'http://lilith.huxhorn.de'
                    licenses {
                        license {
                            name = 'The GNU General Public License, Version 3'
                            url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                            distribution = 'repo'
                        }
                    }
                    scm {
                        url = 'https://github.com/huxi/lilith'
                    }
                    developers {
                        developer {
                            id = 'huxhorn'
                            name = 'Joern Huxhorn'
                            email = 'huxhorn@users.sourceforge.net'
                        }
                    }
                    properties = [
                            'project.build.sourceEncoding': 'UTF-8',
                            'project.reporting.outputEncoding': 'UTF-8'
                    ]
                }
            }
        }
        repositories {
            maven {
                name = 'local'
                url = uri(version.endsWith('SNAPSHOT') ? localSnapshotRepo : localReleaseRepo)
            }
        }
    }

    signing {
        required = { !version.endsWith('SNAPSHOT') }
        sign publishing.publications['mavenJava']
    }

    // Convenience target to publish the module
    tasks.register('uploadPublished') {
        group = 'publishing'
        description = 'Publishes Maven publications to the configured local repository.'
        dependsOn tasks.named('publish')
    }
}

// Aggregate javadoc (optional; useful for publishing a unified site)
task javadocAll(type: Javadoc) {
    destinationDir = file("$buildDir/javadocAll")
    source = files { subprojects.collect { it.sourceSets.main.java } }
    classpath = files { subprojects.collect { it.sourceSets.main.compileClasspath } }
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

// Aggregated coverage report across subprojects
task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.from(files(subprojects.sourceSets.main.allSource.srcDirs))
    sourceDirectories.from(files(subprojects.sourceSets.main.allSource.srcDirs))
    classDirectories.from(files(subprojects.sourceSets.main.output))
    executionData.from(files(subprojects.jacocoTestReport.executionData))
    reports {
        html.required.set(true)
        xml.required.set(true)
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        csv.required.set(false)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/report.xml"
    sourceDirs += jacocoRootReport.sourceDirectories
}

// Repo maintenance helpers (local)
ext.deleteClosure = { File it ->
    it.eachDir(deleteClosure)
    it.eachFile { f -> f.delete() }
}

tasks.register('cleanStaging') {
    group = 'Repository'
    description = "Cleans the local staging-repository at '${localReleaseRepoFile.absolutePath}'."
    doLast { deleteClosure(localReleaseRepoFile) }
}

tasks.register('cleanSnapshot') {
    group = 'Repository'
    description = "Cleans the local snapshot-repository at '${localSnapshotRepoFile.absolutePath}'."
    doLast { deleteClosure(localSnapshotRepoFile) }
}

// Streamlined default + convenience tasks
defaultTasks 'build'

tasks.register('uploadPublished') {
    group = 'publishing'
    description = 'Publishes all Maven publications in subprojects to the local repository.'
    dependsOn subprojects.collect { "${it.path}:uploadPublished" }
}

tasks.register('publishLocal') {
    group = 'publishing'
    description = 'Publishes all publications to local (release/snapshot) repository.'
    dependsOn tasks.named('uploadPublished')
}

tasks.register('appPackage') {
    group = 'distribution'
    description = 'Assembles Lilith app fat JAR and distributions.'
    dependsOn ':lilith:shadowJar', ':lilith:distZip', ':lilith:distTar'
}

tasks.register('coverageReport') {
    group = 'verification'
    description = 'Runs tests and produces aggregated coverage report.'
    dependsOn 'test', 'jacocoRootReport'
}
